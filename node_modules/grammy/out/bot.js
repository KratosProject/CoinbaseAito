"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Bot = exports.BotError = void 0;
const abort_controller_1 = require("abort-controller");
// deno-lint-ignore-file camelcase
const composer_1 = require("./composer");
const context_1 = require("./context");
const api_1 = require("./core/api");
const error_1 = require("./core/error");
const platform_1 = require("./platform");
const debug = platform_1.debug('grammy:bot');
const debugErr = platform_1.debug('grammy:error');
/**
 * This error is thrown when middleware throws. It simply wraps the original
 * error (accessible via the `error` property), but also provides access to the
 * respective context object that was processed while the error occurred.
 */
class BotError extends Error {
    constructor(error, ctx) {
        super('Error in middleware!');
        this.error = error;
        this.ctx = ctx;
    }
}
exports.BotError = BotError;
/**
 * This is the single most important class of grammY. It represents your bot.
 *
 * First, you must create a bot by talking to @BotFather, check out
 * https://t.me/BotFather. Once it is ready, you obtain a secret token for your
 * bot. grammY will use that token to identify as your bot when talking to the
 * Telegram servers. Got the token? You are now ready to write some code and run
 * your bot!
 *
 * You should do three things to run your bot:
 * ```ts
 * // 1. Create a bot instance
 * const bot = new Bot('<secret-token>')
 * // 2. Listen for updates
 * bot.on('message:text', ctx => ctx.reply('You wrote: ' + ctx.message.text))
 * // 3. Launch it!
 * bot.start()
 * ```
 */
class Bot extends composer_1.Composer {
    /**
     * Creates a new Bot with the given token.
     *
     * Remember that you can listen for messages by calling
     * ```ts
     * bot.on('message', ctx => { ... })
     * ```
     * or similar methods.
     *
     * The simplest way to start your bot is via simple long polling:
     * ```ts
     * bot.start()
     * ```
     *
     * @param token The bot's token as acquired from https://t.me/BotFather
     * @param config Optional configuration properties for the bot
     */
    constructor(token, config) {
        var _a;
        super();
        this.token = token;
        this.pollingRunning = false;
        this.lastTriedUpdateId = 0;
        /**
         * Holds the bot's error handler that is invoked whenever middleware throws
         * (rejects). If you set your own error handler via `bot.catch`, all that
         * happens is that this variable is assigned.
         */
        this.errorHandler = async (err) => {
            var _a, _b;
            console.error('Error in middleware while handling update', (_b = (_a = err.ctx) === null || _a === void 0 ? void 0 : _a.update) === null || _b === void 0 ? void 0 : _b.update_id, err.error);
            console.error('No error handler was set!');
            console.error('Set your own error handler with `bot.catch = ...`');
            if (this.pollingRunning) {
                console.error('Stopping bot');
                await this.stop();
            }
            throw err;
        };
        if (token.length === 0)
            throw new Error('Empty token!');
        this.botInfo = config === null || config === void 0 ? void 0 : config.botInfo;
        this.clientConfig = config === null || config === void 0 ? void 0 : config.client;
        this.ContextConstructor =
            (_a = config === null || config === void 0 ? void 0 : config.ContextConstructor) !== null && _a !== void 0 ? _a : context_1.Context;
        this.api = new api_1.Api(token, this.clientConfig);
    }
    /**
     * Initializes the bot, i.e. fetches information about the bot itself. This
     * method is called automatically, you don't have to call it manually.
     */
    async init() {
        if (this.botInfo === undefined) {
            debug('Initializing bot');
            this.botInfo = await this.api.getMe();
        }
        else {
            debug('Bot already initialized!');
        }
        debug(`I am ${this.botInfo.username}!`);
    }
    /**
     * This is an internal method that you probably will not ever need to call.
     * It is used whenever a new update arrives from the Telegram servers that
     * your bot will handle.
     *
     * If you're writing a library on top of grammY, check out the
     * [documentation](https://grammy.dev/plugins/runner.html) of the runner
     * plugin for an example that uses this method.
     *
     * @param update An update from the Telegram Bot API
     * @param webhookReplyEnvelope An optional webhook reply envelope
     */
    async handleUpdate(update, webhookReplyEnvelope) {
        if (this.botInfo === undefined)
            throw new Error('Bot not initialized!');
        debug(`Processing update ${update.update_id}`);
        // create API object
        const api = new api_1.Api(this.token, this.clientConfig, webhookReplyEnvelope);
        // configure it with the same transformers as bot.api
        const t = this.api.config.installedTransformers();
        if (t.length > 0)
            api.config.use(...t);
        // create context object
        const ctx = new this.ContextConstructor(update, api, this.botInfo);
        try {
            // run middleware stack
            await composer_1.run(this.middleware(), ctx);
        }
        catch (err) {
            debugErr(`Error in middleware for update ${update.update_id}`);
            throw new BotError(err, ctx);
        }
    }
    /**
     * Starts your bot using long polling.
     *
     * This method effectively enters a loop that will repeatedly call
     * `getUpdates` and run your middleware for every received update, allowing
     * your bot to respond to messages.
     *
     * If your bot is already running, this method does nothing.
     *
     * This method returns a `Promise` that will never resolve except if your
     * bot is stopped. Remember to catch potential errors by calling
     * `bot.catch`, otherwise your bot will crash (and stop) if something goes
     * wrong in your code.
     *
     * **Note that this starts your bot using a very simple long polling
     * implementation.** `bot.start` should only be used for small bots. While
     * the rest of grammY was built to perform well even under extreme loads,
     * simple long polling is not capable of scaling up in a similar fashion.
     * You should switch over to using `@grammyjs/runner` if you are running a
     * bot with high load.
     *
     * What exactly _high load_ means differs from bot to bot, but as a rule of
     * thumb, simple long polling should not be processing more than ~5K
     * messages every hour. Also, if your bot has long-running operations such
     * as large file transfers that block the middleware from completing, this
     * will impact the responsiveness negatively, so it makes sense to use the
     * `@grammyjs/runner` package even if you receive much fewer messages. If
     * you worry about how much load your bot can handle, check out the grammY
     * [documentation](https://grammy.dev/advanced/scaling.html) about scaling
     * up.
     *
     * @param options Options to use for simple long polling
     */
    async start(options) {
        var _a;
        await this.init();
        if (this.pollingRunning) {
            debug('Simple long polling already running!');
            return;
        }
        await this.api.deleteWebhook({
            drop_pending_updates: options === null || options === void 0 ? void 0 : options.drop_pending_updates,
        });
        debug('Starting simple long polling');
        this.pollingRunning = true;
        this.pollingAbortController = new abort_controller_1.AbortController();
        const limit = options === null || options === void 0 ? void 0 : options.limit;
        const timeout = (_a = options === null || options === void 0 ? void 0 : options.timeout) !== null && _a !== void 0 ? _a : 30; // seconds
        let allowed_updates = options === null || options === void 0 ? void 0 : options.allowed_updates;
        while (this.pollingRunning) {
            // fetch updates
            const offset = this.lastTriedUpdateId + 1;
            let updates = undefined;
            let maxRetries = 1200; // 1 hour of continuously failing requests
            do {
                try {
                    updates = await this.api.getUpdates({ offset, limit, timeout, allowed_updates }, this.pollingAbortController.signal);
                }
                catch (error) {
                    if (this.pollingRunning && error instanceof error_1.GrammyError) {
                        debugErr(`Call to \`getUpdates\` failed, retrying in 3 seconds ...`);
                        await new Promise(r => setTimeout(r, 3000));
                    }
                    else {
                        throw error;
                    }
                }
            } while (updates === undefined &&
                this.pollingRunning &&
                maxRetries-- > 0);
            if (updates === undefined)
                break;
            // handle them sequentially (!)
            for (const update of updates) {
                this.lastTriedUpdateId = update.update_id;
                try {
                    await this.handleUpdate(update);
                }
                catch (err) {
                    await this.errorHandler(err);
                }
            }
            // Telegram uses the last setting if `allowed_updates` is omitted so
            // we can save same traffic by only sending it in the first request
            allowed_updates = undefined;
        }
    }
    /**
     * Stops the bot from long polling.
     *
     * All middleware that is currently being executed may complete, but no
     * further `getUpdates` calls will be performed. The current `getUpdates`
     * request will be cancelled (unless you know what Deno is and you're using
     * it, there cancelling requests is not supported yet).
     *
     * In addition, this method will _confirm_ the last received update to the
     * Telegram servers by calling `getUpdates` one last time with the latest
     * offset value. If any updates are received in this call, they are
     * discarded and will be fetched again when the bot starts up the next time.
     * Confer the official documentation on confirming updates if you want to
     * know more: https://core.telegram.org/bots/api#getupdates
     */
    async stop() {
        var _a;
        if (this.pollingRunning) {
            debug('Stopping bot, saving update offset');
            this.pollingRunning = false;
            (_a = this.pollingAbortController) === null || _a === void 0 ? void 0 : _a.abort();
            await this.api.getUpdates({ offset: this.lastTriedUpdateId + 1 });
            this.pollingAbortController = undefined;
        }
        else {
            debug('Bot is not running!');
        }
    }
    /**
     * Sets the bots error handler that is used during long polling.
     *
     * You should call this method to set an error handler if you are using long
     * polling, no matter whether you use `bot.start` or the `@grammyjs/runner`
     * package to run your bot.
     *
     * Calling `bot.catch` when using other means of running your bot (or
     * webhooks) has no effect.
     *
     * @param errorHandler A function that handles potential middleware errors
     */
    catch(errorHandler) {
        this.errorHandler = errorHandler;
    }
}
exports.Bot = Bot;
