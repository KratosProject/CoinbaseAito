/// <reference types="node" />
import { InputFileProxy } from "@grammyjs/types";
import { ReadStream } from "fs";
import { Agent } from "https";
import { Readable } from "stream";
export * from "@grammyjs/types";
export { debug } from "debug";
export { createReadStream as streamFile } from "fs";
export declare const itrToStream: (itr: AsyncIterable<Uint8Array>) => Readable;
export declare const baseFetchConfig: {
    compress: boolean;
    agent: Agent;
};
/** This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in the usual way that files are uploaded via the browser. */
export declare class InputFile {
    readonly file: string | Uint8Array | ReadStream | AsyncGenerator<Uint8Array>;
    readonly filename?: string;
    /**
     * Constructs an `InputFile` that can be used in the API to send files.
     *
     * @param file A path to a local file or a `Buffer` or a `fs.ReadStream` that specifies the file data
     * @param filename Optional name of the file
     */
    constructor(file: string | Uint8Array | ReadStream | AsyncGenerator<Uint8Array>, filename?: string);
}
declare type GrammyTypes = InputFileProxy<InputFile>;
/** Wrapper type to bundle all methods of the Telegram API */
export declare type Telegram = GrammyTypes["Telegram"];
/** Utility type providing the argument type for the given method name or `{}` if the method does not take any parameters */
export declare type Opts<M extends keyof GrammyTypes["Telegram"]> = GrammyTypes["Opts"][M];
/** This object represents the content of a media message to be sent. It should be one of
- InputMediaAnimation
- InputMediaDocument
- InputMediaAudio
- InputMediaPhoto
- InputMediaVideo */
export declare type InputMedia = GrammyTypes["InputMedia"];
/** Represents a photo to be sent. */
export declare type InputMediaPhoto = GrammyTypes["InputMediaPhoto"];
/** Represents a video to be sent. */
export declare type InputMediaVideo = GrammyTypes["InputMediaVideo"];
/** Represents an animation file (GIF or H.264/MPEG-4 AVC video without sound) to be sent. */
export declare type InputMediaAnimation = GrammyTypes["InputMediaAnimation"];
/** Represents an audio file to be treated as music to be sent. */
export declare type InputMediaAudio = GrammyTypes["InputMediaAudio"];
/** Represents a general file to be sent. */
export declare type InputMediaDocument = GrammyTypes["InputMediaDocument"];
